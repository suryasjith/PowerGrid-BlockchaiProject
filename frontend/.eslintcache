[{"/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/index.js":"1","/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/reportWebVitals.js":"2","/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Routes/Routes.js":"3","/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/App.js":"4","/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/AdminPage.js":"5","/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/User.js":"6","/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/StartingPage.js":"7","/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/Footer.js":"8","/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/Header.js":"9","/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/Admin.js":"10","/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Helper/helper.js":"11"},{"size":542,"mtime":1609677723740,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1609677723740,"results":"14","hashOfConfig":"13"},{"size":548,"mtime":1609677723740,"results":"15","hashOfConfig":"13"},{"size":472,"mtime":1609677723728,"results":"16","hashOfConfig":"13"},{"size":1477,"mtime":1609677723740,"results":"17","hashOfConfig":"13"},{"size":4148,"mtime":1609689954878,"results":"18","hashOfConfig":"13"},{"size":1448,"mtime":1609677723740,"results":"19","hashOfConfig":"13"},{"size":2138,"mtime":1609677723740,"results":"20","hashOfConfig":"13"},{"size":1805,"mtime":1609677723740,"results":"21","hashOfConfig":"13"},{"size":4697,"mtime":1609686621961,"results":"22","hashOfConfig":"13"},{"size":428,"mtime":1609677723740,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"dzo0go",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/index.js",[],["48","49"],"/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/reportWebVitals.js",[],"/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Routes/Routes.js",[],"/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/App.js",[],"/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/AdminPage.js",[],"/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/User.js",[],"/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/StartingPage.js",[],"/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/Footer.js",[],"/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/Header.js",[],"/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Components/Admin.js",["50"],"import React, { useEffect, useState } from 'react';\nimport AddUSer from '../contracts/Admin.json';\nimport AddDetails from '../contracts/Consumption.json';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField'\nimport { Button } from '@material-ui/core';\n\n\nimport { loadWeb3 } from '../Helper/helper';\nimport { Divider } from '@material-ui/core';\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\n\n\n\nconst AdminSection = () => {\n\n  const [account,setAccount]=useState(\"\");\n  const [values, setValues] = useState({\n    consumer_address: \"\",\n    username: \"\",\n    prev_reading: \"\",\n    addUserinst: \"\",\n  })\n\n  useEffect( () => {\n    loadWeb3();\n    loadBlockchainData();\n  },[account]);\n\n  const [details,setDetails] = useState({\n    accountNo : \"\",\n    currReading : \"\",\n    unitShared : \"\",\n    detailinst : \"\",\n  })\n  \n  \n  const classes = useStyles();\n\n\n\n\n  const { consumer_address, username, prev_reading } = values;\n\n \n\n\n  // const { account,\n  // addUserinst,\n  // prev_reading} = addr;\n\n\n\n  //creating registration instance\n  async function loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    const account2 = accounts[0]\n    setAccount(account2);\n    console.log(account2);\n    console.log(account);\n    //getting network id\n    const networkId = await web3.eth.net.getId();\n\n\n    const AddUserData = AddUSer.networks[networkId];\n    if (AddUserData) {\n      const addUserinst = new web3.eth.Contract(\n        AddUSer.abi,\n        AddUserData.address\n      );\n      setValues({ addUserinst });\n\n    }\n    else {\n      alert(\"Contract not found\")\n    }\n\nconst addUserDetails = AddDetails.networks[networkId];\n      if(addUserDetails){\n        const detailinst = new web3.eth.Contract(\n          AddDetails.abi,\n          addUserDetails.address\n        )\n        setDetails({detailinst})\n      }\n      else {\n        alert(\"contract not found\")\n      }\n\n    \n\n  }\n  \n\n  const handleSubmit = name => e =>{\n    e.preventDefault()\n    setDetails({...details,[name] : e.target.value})\n  }\n\n  const handleChange = name => event => {\n    event.preventDefault()\n    setValues({ ...values, [name]: event.target.value })\n  }\n  const submitDetails = async (event) => {\n    event.preventDefault();\n    console.log(values.prev_reading);\n    await values.addUserinst.methods.addConsumer(consumer_address, username, prev_reading).send({ from:account })\n  }\n\n  const addDetails  = async (e) => {\n    e.preventDefault();\n const consumerAddress =    await values.addUserinst.methods.registration(consumer_address).call();\n\n    await details.detailinst.methods.totalUnitConsumed(details.accountNo,details.currReading ,details.unitShared,consumerAddress.prevReading).send({from:account})\n  }\n\n  \n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        {/* <TextField id=\"standard-basic\" label=\"Consumer ID\" />  */}\n        <TextField\n          onChange={handleChange(\"consumer_address\")} value={consumer_address} type=\"text\" id=\"standard-basic\" label=\"Consumer Address\" />  <br />\n        <TextField onChange={handleChange(\"username\")} value={username} type=\"text\" id=\"standard-basic\" label=\"Username\" /> <br />\n        <TextField onChange={handleChange(\"prev_reading\")} value={prev_reading} type=\"text\" id=\"standard-basic\" label=\"Previous Reading\" /> <br />\n        {/* <TextField id=\"standard-basic\" label=\"Contact Number\" /> <br /> */}\n\n        <Button variant=\"contained\" onClick={submitDetails} style={{ backgroundColor: \"#70adb5\" }}> Register </Button>\n\n\n      </form>\n      <br />\n      <br />\n      \n      <br />\n     \n<h3>Enter user details here</h3>\n      <Divider variant=\"middle\" />\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <TextField onChange = {handleSubmit(\"accountNo\")} value = {details.accountNo} id=\"standard-basic\" label=\"Consumer ID\" /> <br />\n       \n        <TextField onChange = {handleSubmit(\"currReading\")} value = {details.currReading} id=\"standard-basic\" label=\"Current Reading\" /> <br />\n        <TextField onChange = {handleSubmit(\"unitShared\")} value = {details.unitShared} id=\"standard-basic\" label=\"Grid Shared\" /> <br />\n\n        <Button variant=\"contained\" onClick = {addDetails} style={{ backgroundColor: \"#70adb5\" }}> Submit </Button>\n\n\n\n\n        {/* <TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" /> */}\n        {/* <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" /> */}\n      </form>\n    </div>\n  )\n}\nexport default AdminSection;","/home/unblok/Documents/wetew/ced-b4-g02/frontend/src/Helper/helper.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":40,"column":5,"nodeType":"57","endLine":40,"endColumn":14,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadBlockchainData'. Either include it or remove the dependency array.","ArrayExpression",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [account, loadBlockchainData]",{"range":"64","text":"65"},[818,827],"[account, loadBlockchainData]"]